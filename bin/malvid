#!/usr/bin/env node

'use strict'

const fse = require('fs-extra')
const mri = require('mri')
const ora = require('ora')
const findUp = require('find-up')
const pkg = require('./../package')

const alias = {
	o: 'output',
	V: 'version',
	h: 'help'
}

const getConfig = function() {

	const configPath = findUp.sync([ 'malvidfile.js', 'malvidfile.json' ])

	if (configPath==null) return undefined

	return require(configPath)

}

const getMalvid = function() {

	// Require malvid only when it's needed to speed up the CLI
	return require('./../src/index')

}

const execute = async function(command, output) {

	const spinner = ora({
		spinner: 'triangle',
		color: 'blue'
	})

	try {

		spinner.start('Loading malvidfile')

		const config = getConfig()
		const malvid = getMalvid()

		if (config==null) spinner.warn()
		else spinner.succeed()

		spinner.start('Gathering components')

		const response = await malvid(config)

		spinner.succeed()
		spinner.start('Gathering output')

		const html = (command==='html' || command==='all') ? await response.html : undefined
		const json = (command==='json' || command==='all') ? await response.json : undefined

		spinner.succeed()
		spinner.start('Writing output')

		if (command==='html') fse.outputFile(output[0], html)
		if (command==='json') fse.outputFile(output[0], JSON.stringify(json))

		if (command==='all') {
			fse.outputFile(output[0], html)
			fse.outputFile(output[1], JSON.stringify(json))
		}

		spinner.succeed()

	} catch (err) {

		spinner.fail()
		console.error(err)
		process.exit(1)

	}

}

const version = () => console.log(pkg.version)

const help = function() {

	console.log(`
		Usage:

		  malvid [command] [filenames] [options]

		Commands:

		  html [filename]  output HTML for the UI
		  json [filename]  output JSON with component data

		Options:

		  -V, --version  output the version number
		  -h, --help     output usage information

		Examples:

		  $ malvid index.html index.html.json
		  $ malvid html index.html
		  $ malvid json index.html.json
	`.replace(/\t/g, ' '))

}

const html = (filename) => execute('html', [ filename ])

const json = (filename) => execute('json', [ filename ])

const all = (filenames) => execute('all', filenames)

const parse = function(argv) {

	// Output the version number
	if (argv.version===true) return version()

	// Output usage information
	if (argv.help===true) return help()

	// Output HTML
	if (argv._[0]==='html' && argv._[1]!=null) return html(argv._[1])

	// Output HTML
	if (argv._[0]==='json' && argv._[1]!=null) return json(argv._[1])

	// Output everything
	if (argv._[0]!=null && argv._[1]!=null) return all([ argv._[0], argv._[1] ])

	// Show usage information when no known arg was found
	help()

}

parse(mri(process.argv.slice(2), { alias }))